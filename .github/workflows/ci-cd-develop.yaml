name: CI/CD Pipeline

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      pipeline_type:
        description: 'Select the pipeline type'
        required: true
        default: 'full'
        options:
          - full
          - deploy-only

jobs:
  Tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.pipeline_type == 'full' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: npm install
      - name: Run tests
        run: npm run test

  SonarQube:
    runs-on: ubuntu-latest
    needs: [Tests]
    if: ${{ github.event.inputs.pipeline_type == 'full' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: npm install
      - name: Run tests with coverage
        run: npm run test:ci
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          sonarToken: ${{ secrets.SONARCLOUD_TOKEN }}

  Deploy-Preview:
    runs-on: ubuntu-latest
    needs: [SonarQube]
    if: ${{ github.event.inputs.pipeline_type == 'full' || github.event.inputs.pipeline_type == 'deploy-only' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ env.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ env.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}
